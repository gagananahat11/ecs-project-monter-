name: CI/CD to ECS (ECR Direct Push)

on:
  push:
    branches:
      - devops
      - release
      - develop

env:
  AWS_REGION: ap-south-1
  TASK_FAMILY: ecs-sample-app-task

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPO_NAME: ${{ secrets.ECR_REPO_NAME }}
      ECS_DEV_CLUSTER: ${{ secrets.ECS_DEV_CLUSTER }}
      ECS_DEV_SERVICE: ${{ secrets.ECS_DEV_SERVICE }}
      ECS_PROD_CLUSTER: ${{ secrets.ECS_PROD_CLUSTER }}
      ECS_PROD_SERVICE: ${{ secrets.ECS_PROD_SERVICE }}
      AWS_ECR_REPO: ${{ secrets.AWS_ECR_REPO }}

    steps:

      # -------------------- STEP 1: Checkout Code --------------------
      - name: Checkout Code
        uses: actions/checkout@v4

      # -------------------- STEP 2: Set Branch Parameter --------------------
      - name: Set Branch Parameter
        id: branch
        run: |
          set -e
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD | sed 's/\//_/g')
          echo "DTAG_BRANCH=$BRANCH_NAME" >> $GITHUB_ENV
          echo "✅ Branch detected: $BRANCH_NAME"

      # -------------------- STEP 3: Configure AWS Credentials --------------------
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # -------------------- STEP 4: Login to Amazon ECR --------------------
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # -------------------- STEP 5: Build and Push Docker Image --------------------
      - name: Build and Push Docker Image (:latest)
        run: |
          set -e
          echo "📁 Current directory:"
          pwd
          echo "📄 Files in repo root:"
          ls -la

          cd $GITHUB_WORKSPACE

          IMAGE_URI=${{ secrets.AWS_ECR_REPO }}:latest
          echo "📦 Building Docker image: $IMAGE_URI"

          docker build --no-cache -t $IMAGE_URI -f ./app/Dockerfile ./app
          docker push $IMAGE_URI

          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          echo "✅ Docker image pushed successfully as :latest"

      # -------------------- STEP 6: Determine Deployment Environment --------------------

      # -------------------- STEP 7: Deploy to ECS --------------------
      - name: Deploy to ECS
        run: |
          set -e
          CLUSTER_NAME="${{ env.ECS_CLUSTER }}"
          SERVICE_NAME="${{ env.ECS_SERVICE }}"
          IMAGE_URI="${{ env.IMAGE_URI }}"
          CONTAINER_NAME="activity-to-ef-mapping"  # 🔹 replace with your ECS container name

          echo "🛰 Deploying to ECS Cluster: $CLUSTER_NAME"
          echo "Service: $SERVICE_NAME"
          echo "Using image: $IMAGE_URI"

          # Get current task definition
          OLD_TASK_DEF=$(aws ecs describe-services \
            --cluster $CLUSTER_NAME \
            --services $SERVICE_NAME \
            --query "services[0].taskDefinition" \
            --output text)

          # Save old task definition
          aws ecs describe-task-definition --task-definition $OLD_TASK_DEF --query "taskDefinition" > old-task-def.json

          # Update container image in task definition
          jq --arg IMAGE "$IMAGE_URI" --arg NAME "$CONTAINER_NAME" \
            '.containerDefinitions |= map(if .name == $NAME then .image = $IMAGE else . end) |
             {family: .family, containerDefinitions: .containerDefinitions, taskRoleArn: .taskRoleArn, executionRoleArn: .executionRoleArn, networkMode: .networkMode}' \
            old-task-def.json > new-task-def.json

          # Register new task definition
          NEW_TASK_DEF=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)

          # Update ECS service to use new task definition
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition $NEW_TASK_DEF \
            --force-new-deployment

          echo "✅ ECS service updated successfully!"
          echo "📄 New Task Definition ARN: $NEW_TASK_DEF"
