name: CI/CD to ECS (ECR Direct Push)

on:
  push:
    branches:
      - devops
      - release
      - develop

env:
  AWS_REGION: us-east-1
  TASK_FAMILY: ecs-sample-app-task

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPO_NAME: ${{ secrets.ECR_REPO_NAME }}
      ECS_DEV_CLUSTER: ${{ secrets.ECS_DEV_CLUSTER }}
      ECS_DEV_SERVICE: ${{ secrets.ECS_DEV_SERVICE }}
      ECS_PROD_CLUSTER: ${{ secrets.ECS_PROD_CLUSTER }}
      ECS_PROD_SERVICE: ${{ secrets.ECS_PROD_SERVICE }}
      AWS_ECR_REPO: ${{ secrets.AWS_ECR_REPO }}

    steps:
      # -------------------- STEP 1 --------------------
      - name: Checkout code
        uses: actions/checkout@v4

      # -------------------- STEP 2 --------------------
      - name: Set Build Parameters
        id: dtag
        run: |
          set -e
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD | sed 's/\//_/g')
          echo "DTAG_BRANCH=$BRANCH_NAME" >> $GITHUB_ENV
          echo "✅ Branch: $BRANCH_NAME"

      # -------------------- STEP 3 --------------------
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # -------------------- STEP 4 --------------------
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # -------------------- STEP 5 --------------------
      - name: Build and Push Docker Image (latest)
        run: |
          set -e
          IMAGE_URI=${{ secrets.AWS_ECR_REPO }}:latest
          echo "Building Docker image: $IMAGE_URI"
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          echo "✅ Docker image pushed successfully as :latest"

      # -------------------- STEP 6 --------------------
      - name: Determine Deployment Environment
        run: |
          set -e
          if [[ "${{ env.DTAG_BRANCH }}" == "develop" ]]; then
            echo "ECS_CLUSTER=${{ env.ECS_DEV_CLUSTER }}" >> $GITHUB_ENV
            echo "ECS_SERVICE=${{ env.ECS_DEV_SERVICE }}" >> $GITHUB_ENV
            echo "Deploying to DEV environment."
          elif [[ "${{ env.DTAG_BRANCH }}" == release* ]]; then
            echo "ECS_CLUSTER=${{ env.ECS_PROD_CLUSTER }}" >> $GITHUB_ENV
            echo "ECS_SERVICE=${{ env.ECS_PROD_SERVICE }}" >> $GITHUB_ENV
            echo "Deploying to PROD environment."
          else
            echo "❌ Error: Unknown environment for branch ${{ env.DTAG_BRANCH }}"
            exit 1
          fi

      # -------------------- STEP 7 --------------------
      - name: Deploy to ECS
        run: |
          set -e
          CLUSTER_NAME="${{ env.ECS_CLUSTER }}"
          SERVICE_NAME="${{ env.ECS_SERVICE }}"
          IMAGE_URI="${{ env.IMAGE_URI }}"

          echo "🚀 Deploying to ECS Cluster: $CLUSTER_NAME"
          echo "Service: $SERVICE_NAME"
          echo "Using image: $IMAGE_URI"

          # Get current ECS task definition
          OLD_TASK_DEF=$(aws ecs describe-services \
            --cluster $CLUSTER_NAME \
            --services $SERVICE_NAME \
            --query "services[0].taskDefinition" \
            --output text)

          # Update the container image to :latest
          aws ecs describe-task-definition --task-definition $OLD_TASK_DEF --query "taskDefinition" | \
            jq --arg IMAGE "$IMAGE_URI" \
            '.containerDefinitions |= map(if .name == "activity-to-ef-mapping" then .image = $IMAGE else . end) |
             {family: .family, containerDefinitions: .containerDefinitions, taskRoleArn: .taskRoleArn, executionRoleArn: .executionRoleArn, networkMode: .networkMode}' \
            > new-task-def.json
          # logs 
          # Register new task definition
          NEW_TASK_DEF=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)

          # Force ECS to deploy the new definition
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition $NEW_TASK_DEF

          echo "✅ ECS Service updated successfully!"
